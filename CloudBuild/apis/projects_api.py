# coding: utf-8

"""
    Unity Cloud Build

    This API is intended to be used in conjunction with the Unity Cloud Build service. A tool for building your Unity projects in the Cloud.  See https://developer.cloud.unity3d.com for more information.  ## Making requests This website is built to allow requests to be made against the API. If you are currently logged into Cloud Build you should be able to make requests without entering an API key.   You can find your API key in the Unity Cloud Services portal by clicking on 'Cloud Build Preferences' in the sidebar. Copy the API Key and paste it into the upper left corner of this website. It will be used in all subsequent requests.  ## Clients The Unity Cloud Build API is based upon Swagger. Client libraries to integrate with your projects can easily be generated with the [Swagger Code Generator](https://github.com/swagger-api/swagger-codegen).  The JSON schema required to generate a client for this API version is located here:  ``` [API_URL][BASE_PATH]/api.json ```  ## Authorization The Unity Cloud Build API requires an access token from your Unity Cloud Build account, which can be found at https://build.cloud.unity3d.com/login/me  To authenticate requests, include a Basic Authentication header with your API key as the value. e.g.  ``` Authorization: Basic [YOUR API KEY] ```  ## Pagination Paged results will take two parameters. A page number that is calculated based upon the per_page amount. For instance if there are 40 results and you specify page 2 with per_page set to 10 you will receive records 11-20.  Paged results will also return a Content-Range header. For the example above the content range header would look like this:  ``` Content-Range: items 11-20/40 ```  ## Versioning The API version is indicated in the request URL. Upgrading to a newer API version can be done by changing the path.  The API will receive a new version in the following cases:    * removal of a path or request type   * addition of a required field   * removal of a required field  The following changes are considered backwards compatible and will not trigger a new API version:    * addition of an endpoint or request type   * addition of an optional field   * removal of an optional field   * changes to the format of ids  ## Rate Limiting Requests against the Cloud Build API are limited to a rate of 100 per minute. To preserve the quality of service throughout Cloud Build, additional rate limits may apply to some actions. For example, polling aggressively instead of using webhooks or making API calls with a high concurrency may result in rate limiting.  It is not intended for these rate limits to interfere with any legitimate use of the API. Please contact support at <cloudbuild@unity3d.com> if your use is affected by this rate limit.  You can check the returned HTTP headers for any API request to see your current rate limit status.   * __X-RateLimit-Limit:__ maximum number of requests per minute   * __X-RateLimit-Remaining:__ remaining number of requests in the current window   * __X-RateLimit-Reset:__ time at which the current window will reset (UTC epoch seconds)  Once you go over the rate limit you will receive an error response: ``` HTTP Status: 429 {   \"error\": \"Rate limit exceeded, retry in XX seconds\" } ``` 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ProjectsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_project(self, orgid, options, **kwargs):
        """
        Create project
        Create a project for the specified organization
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_project(orgid, options, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param Options4 options: Options for project create/update (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_project_with_http_info(orgid, options, **kwargs)
        else:
            (data) = self.add_project_with_http_info(orgid, options, **kwargs)
            return data

    def add_project_with_http_info(self, orgid, options, **kwargs):
        """
        Create project
        Create a project for the specified organization
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_project_with_http_info(orgid, options, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param Options4 options: Options for project create/update (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'options']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `add_project`")
        # verify the required parameter 'options' is set
        if ('options' not in params) or (params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `add_project`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'options' in params:
            body_params = params['options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2009',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def archive_project(self, orgid, projectid, **kwargs):
        """
        Archive project
        This will archive the project in Cloud Build ONLY. Use with caution - this process is not reversible. The projects UPID will be removed from Cloud Build allowing the project to be reconfigured.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.archive_project(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.archive_project_with_http_info(orgid, projectid, **kwargs)
        else:
            (data) = self.archive_project_with_http_info(orgid, projectid, **kwargs)
            return data

    def archive_project_with_http_info(self, orgid, projectid, **kwargs):
        """
        Archive project
        This will archive the project in Cloud Build ONLY. Use with caution - this process is not reversible. The projects UPID will be removed from Cloud Build allowing the project to be reconfigured.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.archive_project_with_http_info(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archive_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `archive_project`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `archive_project`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_audit_log(self, orgid, projectid, **kwargs):
        """
        Get audit log
        Retrieve a list of historical settings changes for this project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_audit_log(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param float per_page: Number of audit log records to retrieve
        :param float page: Skip to page number, based on per_page value
        :return: list[InlineResponse20011]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_audit_log_with_http_info(orgid, projectid, **kwargs)
        else:
            (data) = self.get_audit_log_with_http_info(orgid, projectid, **kwargs)
            return data

    def get_audit_log_with_http_info(self, orgid, projectid, **kwargs):
        """
        Get audit log
        Retrieve a list of historical settings changes for this project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_audit_log_with_http_info(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param float per_page: Number of audit log records to retrieve
        :param float page: Skip to page number, based on per_page value
        :return: list[InlineResponse20011]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid', 'per_page', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_audit_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `get_audit_log`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_audit_log`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']

        query_params = []
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))
        if 'page' in params:
            query_params.append(('page', params['page']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/auditlog', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse20011]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_billing_plans(self, orgid, projectid, **kwargs):
        """
        Get billing plan
        Get the billing plan for the specified project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_billing_plans(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_billing_plans_with_http_info(orgid, projectid, **kwargs)
        else:
            (data) = self.get_billing_plans_with_http_info(orgid, projectid, **kwargs)
            return data

    def get_billing_plans_with_http_info(self, orgid, projectid, **kwargs):
        """
        Get billing plan
        Get the billing plan for the specified project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_billing_plans_with_http_info(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_billing_plans" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `get_billing_plans`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_billing_plans`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/billingplan', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2006',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_project(self, orgid, projectid, **kwargs):
        """
        Get project details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_project(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str include: Extra fields to include in the response
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_project_with_http_info(orgid, projectid, **kwargs)
        else:
            (data) = self.get_project_with_http_info(orgid, projectid, **kwargs)
            return data

    def get_project_with_http_info(self, orgid, projectid, **kwargs):
        """
        Get project details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_project_with_http_info(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str include: Extra fields to include in the response
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `get_project`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_project`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2009',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_project_by_upid(self, projectupid, **kwargs):
        """
        Get project details
        Gets the same data as /orgs/{orgid}/project/{projectid} but looks up the project by the Unity Project ID. This value is returned in the project's guid field.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_project_by_upid(projectupid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projectupid: Project UPID - Unity global id (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_project_by_upid_with_http_info(projectupid, **kwargs)
        else:
            (data) = self.get_project_by_upid_with_http_info(projectupid, **kwargs)
            return data

    def get_project_by_upid_with_http_info(self, projectupid, **kwargs):
        """
        Get project details
        Gets the same data as /orgs/{orgid}/project/{projectid} but looks up the project by the Unity Project ID. This value is returned in the project's guid field.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_project_by_upid_with_http_info(projectupid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projectupid: Project UPID - Unity global id (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projectupid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_by_upid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projectupid' is set
        if ('projectupid' not in params) or (params['projectupid'] is None):
            raise ValueError("Missing the required parameter `projectupid` when calling `get_project_by_upid`")


        collection_formats = {}

        path_params = {}
        if 'projectupid' in params:
            path_params['projectupid'] = params['projectupid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/projects/{projectupid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2009',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_ssh_key(self, orgid, projectid, **kwargs):
        """
        Get SSH Key
        Get the ssh public key for the specified project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ssh_key(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_ssh_key_with_http_info(orgid, projectid, **kwargs)
        else:
            (data) = self.get_ssh_key_with_http_info(orgid, projectid, **kwargs)
            return data

    def get_ssh_key_with_http_info(self, orgid, projectid, **kwargs):
        """
        Get SSH Key
        Get the ssh public key for the specified project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ssh_key_with_http_info(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ssh_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `get_ssh_key`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_ssh_key`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/sshkey', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2008',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_stats(self, orgid, projectid, **kwargs):
        """
        Get project statistics
        Get statistics for the specified project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_stats(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_stats_with_http_info(orgid, projectid, **kwargs)
        else:
            (data) = self.get_stats_with_http_info(orgid, projectid, **kwargs)
            return data

    def get_stats_with_http_info(self, orgid, projectid, **kwargs):
        """
        Get project statistics
        Get statistics for the specified project
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_stats_with_http_info(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `get_stats`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_stats`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/stats', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20010',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_projects_for_org(self, orgid, **kwargs):
        """
        List all projects (org)
        List all projects that belong to the specified organization. Add \"?include=settings\" as a query parameter to include the project settings with the response. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_projects_for_org(orgid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str include: Extra fields to include in the response
        :return: list[InlineResponse2009]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_projects_for_org_with_http_info(orgid, **kwargs)
        else:
            (data) = self.list_projects_for_org_with_http_info(orgid, **kwargs)
            return data

    def list_projects_for_org_with_http_info(self, orgid, **kwargs):
        """
        List all projects (org)
        List all projects that belong to the specified organization. Add \"?include=settings\" as a query parameter to include the project settings with the response. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_projects_for_org_with_http_info(orgid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str include: Extra fields to include in the response
        :return: list[InlineResponse2009]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_projects_for_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `list_projects_for_org`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2009]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_projects_for_user(self, **kwargs):
        """
        List all projects (user)
        List all projects that you have permission to access across all organizations. Add \"?include=settings\" as a query parameter to include the project settings with the response. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_projects_for_user(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str include: Extra fields to include in the response
        :return: list[InlineResponse2009]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_projects_for_user_with_http_info(**kwargs)
        else:
            (data) = self.list_projects_for_user_with_http_info(**kwargs)
            return data

    def list_projects_for_user_with_http_info(self, **kwargs):
        """
        List all projects (user)
        List all projects that you have permission to access across all organizations. Add \"?include=settings\" as a query parameter to include the project settings with the response. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_projects_for_user_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str include: Extra fields to include in the response
        :return: list[InlineResponse2009]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_projects_for_user" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey']

        return self.api_client.call_api('/projects', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2009]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_project(self, orgid, projectid, options, **kwargs):
        """
        Update project details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_project(orgid, projectid, options, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param Options5 options: Options for project create/update (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_project_with_http_info(orgid, projectid, options, **kwargs)
        else:
            (data) = self.update_project_with_http_info(orgid, projectid, options, **kwargs)
            return data

    def update_project_with_http_info(self, orgid, projectid, options, **kwargs):
        """
        Update project details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_project_with_http_info(orgid, projectid, options, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param Options5 options: Options for project create/update (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid', 'options']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `update_project`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `update_project`")
        # verify the required parameter 'options' is set
        if ('options' not in params) or (params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `update_project`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'options' in params:
            body_params = params['options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2009',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
