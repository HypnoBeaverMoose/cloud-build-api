# coding: utf-8

"""
    Unity Cloud Build

    This API is intended to be used in conjunction with the Unity Cloud Build service. A tool for building your Unity projects in the Cloud.  See https://developer.cloud.unity3d.com for more information.  ## Making requests This website is built to allow requests to be made against the API. If you are currently logged into Cloud Build you should be able to make requests without entering an API key.   You can find your API key in the Unity Cloud Services portal by clicking on 'Cloud Build Preferences' in the sidebar. Copy the API Key and paste it into the upper left corner of this website. It will be used in all subsequent requests.  ## Clients The Unity Cloud Build API is based upon Swagger. Client libraries to integrate with your projects can easily be generated with the [Swagger Code Generator](https://github.com/swagger-api/swagger-codegen).  The JSON schema required to generate a client for this API version is located here:  ``` [API_URL][BASE_PATH]/api.json ```  ## Authorization The Unity Cloud Build API requires an access token from your Unity Cloud Build account, which can be found at https://build.cloud.unity3d.com/login/me  To authenticate requests, include a Basic Authentication header with your API key as the value. e.g.  ``` Authorization: Basic [YOUR API KEY] ```  ## Pagination Paged results will take two parameters. A page number that is calculated based upon the per_page amount. For instance if there are 40 results and you specify page 2 with per_page set to 10 you will receive records 11-20.  Paged results will also return a Content-Range header. For the example above the content range header would look like this:  ``` Content-Range: items 11-20/40 ```  ## Versioning The API version is indicated in the request URL. Upgrading to a newer API version can be done by changing the path.  The API will receive a new version in the following cases:    * removal of a path or request type   * addition of a required field   * removal of a required field  The following changes are considered backwards compatible and will not trigger a new API version:    * addition of an endpoint or request type   * addition of an optional field   * removal of an optional field   * changes to the format of ids  ## Rate Limiting Requests against the Cloud Build API are limited to a rate of 100 per minute. To preserve the quality of service throughout Cloud Build, additional rate limits may apply to some actions. For example, polling aggressively instead of using webhooks or making API calls with a high concurrency may result in rate limiting.  It is not intended for these rate limits to interfere with any legitimate use of the API. Please contact support at <cloudbuild@unity3d.com> if your use is affected by this rate limit.  You can check the returned HTTP headers for any API request to see your current rate limit status.   * __X-RateLimit-Limit:__ maximum number of requests per minute   * __X-RateLimit-Remaining:__ remaining number of requests in the current window   * __X-RateLimit-Reset:__ time at which the current window will reset (UTC epoch seconds)  Once you go over the rate limit you will receive an error response: ``` HTTP Status: 429 {   \"error\": \"Rate limit exceeded, retry in XX seconds\" } ``` 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CredentialsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_credentials_android(self, orgid, projectid, label, file, alias, keypass, storepass, **kwargs):
        """
        Upload Android Credentials
        Upload a new android keystore for the project. NOTE: you must be a manager in the project's organization to add new credentials. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_credentials_android(orgid, projectid, label, file, alias, keypass, storepass, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str label: Label for the uploaded credential (required)
        :param file file: Keystore file (required)
        :param str alias: Keystore alias (required)
        :param str keypass: Keystore keypass (required)
        :param str storepass: Keystore storepass (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_credentials_android_with_http_info(orgid, projectid, label, file, alias, keypass, storepass, **kwargs)
        else:
            (data) = self.add_credentials_android_with_http_info(orgid, projectid, label, file, alias, keypass, storepass, **kwargs)
            return data

    def add_credentials_android_with_http_info(self, orgid, projectid, label, file, alias, keypass, storepass, **kwargs):
        """
        Upload Android Credentials
        Upload a new android keystore for the project. NOTE: you must be a manager in the project's organization to add new credentials. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_credentials_android_with_http_info(orgid, projectid, label, file, alias, keypass, storepass, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str label: Label for the uploaded credential (required)
        :param file file: Keystore file (required)
        :param str alias: Keystore alias (required)
        :param str keypass: Keystore keypass (required)
        :param str storepass: Keystore storepass (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid', 'label', 'file', 'alias', 'keypass', 'storepass']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_credentials_android" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `add_credentials_android`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `add_credentials_android`")
        # verify the required parameter 'label' is set
        if ('label' not in params) or (params['label'] is None):
            raise ValueError("Missing the required parameter `label` when calling `add_credentials_android`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `add_credentials_android`")
        # verify the required parameter 'alias' is set
        if ('alias' not in params) or (params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `add_credentials_android`")
        # verify the required parameter 'keypass' is set
        if ('keypass' not in params) or (params['keypass'] is None):
            raise ValueError("Missing the required parameter `keypass` when calling `add_credentials_android`")
        # verify the required parameter 'storepass' is set
        if ('storepass' not in params) or (params['storepass'] is None):
            raise ValueError("Missing the required parameter `storepass` when calling `add_credentials_android`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'label' in params:
            form_params.append(('label', params['label']))
        if 'file' in params:
            local_var_files['file'] = params['file']
        if 'alias' in params:
            form_params.append(('alias', params['alias']))
        if 'keypass' in params:
            form_params.append(('keypass', params['keypass']))
        if 'storepass' in params:
            form_params.append(('storepass', params['storepass']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/credentials/signing/android', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_credentials_ios(self, orgid, projectid, label, file_certificate, file_provisioning_profile, **kwargs):
        """
        Upload iOS Credentials
        Upload a new iOS certificate and provisioning profile for the project. NOTE: you must be a manager in the project's organization to add new credentials. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_credentials_ios(orgid, projectid, label, file_certificate, file_provisioning_profile, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str label: Label for the uploaded credentials (required)
        :param file file_certificate: Certificate file (.p12) (required)
        :param file file_provisioning_profile: Provisioning Profile (.mobileprovision) (required)
        :param str certificate_pass: Certificate (.p12) password
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_credentials_ios_with_http_info(orgid, projectid, label, file_certificate, file_provisioning_profile, **kwargs)
        else:
            (data) = self.add_credentials_ios_with_http_info(orgid, projectid, label, file_certificate, file_provisioning_profile, **kwargs)
            return data

    def add_credentials_ios_with_http_info(self, orgid, projectid, label, file_certificate, file_provisioning_profile, **kwargs):
        """
        Upload iOS Credentials
        Upload a new iOS certificate and provisioning profile for the project. NOTE: you must be a manager in the project's organization to add new credentials. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_credentials_ios_with_http_info(orgid, projectid, label, file_certificate, file_provisioning_profile, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str label: Label for the uploaded credentials (required)
        :param file file_certificate: Certificate file (.p12) (required)
        :param file file_provisioning_profile: Provisioning Profile (.mobileprovision) (required)
        :param str certificate_pass: Certificate (.p12) password
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid', 'label', 'file_certificate', 'file_provisioning_profile', 'certificate_pass']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_credentials_ios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `add_credentials_ios`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `add_credentials_ios`")
        # verify the required parameter 'label' is set
        if ('label' not in params) or (params['label'] is None):
            raise ValueError("Missing the required parameter `label` when calling `add_credentials_ios`")
        # verify the required parameter 'file_certificate' is set
        if ('file_certificate' not in params) or (params['file_certificate'] is None):
            raise ValueError("Missing the required parameter `file_certificate` when calling `add_credentials_ios`")
        # verify the required parameter 'file_provisioning_profile' is set
        if ('file_provisioning_profile' not in params) or (params['file_provisioning_profile'] is None):
            raise ValueError("Missing the required parameter `file_provisioning_profile` when calling `add_credentials_ios`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'label' in params:
            form_params.append(('label', params['label']))
        if 'file_certificate' in params:
            local_var_files['fileCertificate'] = params['file_certificate']
        if 'file_provisioning_profile' in params:
            local_var_files['fileProvisioningProfile'] = params['file_provisioning_profile']
        if 'certificate_pass' in params:
            form_params.append(('certificatePass', params['certificate_pass']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/credentials/signing/ios', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_android(self, orgid, projectid, credentialid, **kwargs):
        """
        Delete Android Credentials
        Delete specific android credentials for a project. NOTE: you must be a manager in the project's organization to delete credentials. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_android(orgid, projectid, credentialid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str credentialid: Credential Identifier (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_android_with_http_info(orgid, projectid, credentialid, **kwargs)
        else:
            (data) = self.delete_android_with_http_info(orgid, projectid, credentialid, **kwargs)
            return data

    def delete_android_with_http_info(self, orgid, projectid, credentialid, **kwargs):
        """
        Delete Android Credentials
        Delete specific android credentials for a project. NOTE: you must be a manager in the project's organization to delete credentials. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_android_with_http_info(orgid, projectid, credentialid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str credentialid: Credential Identifier (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid', 'credentialid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_android" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `delete_android`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `delete_android`")
        # verify the required parameter 'credentialid' is set
        if ('credentialid' not in params) or (params['credentialid'] is None):
            raise ValueError("Missing the required parameter `credentialid` when calling `delete_android`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']
        if 'credentialid' in params:
            path_params['credentialid'] = params['credentialid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/credentials/signing/android/{credentialid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_ios(self, orgid, projectid, credentialid, **kwargs):
        """
        Delete iOS Credentials
        Delete specific ios credentials for a project. NOTE: you must be a manager in the project's organization to delete credentials. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_ios(orgid, projectid, credentialid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str credentialid: Credential Identifier (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_ios_with_http_info(orgid, projectid, credentialid, **kwargs)
        else:
            (data) = self.delete_ios_with_http_info(orgid, projectid, credentialid, **kwargs)
            return data

    def delete_ios_with_http_info(self, orgid, projectid, credentialid, **kwargs):
        """
        Delete iOS Credentials
        Delete specific ios credentials for a project. NOTE: you must be a manager in the project's organization to delete credentials. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_ios_with_http_info(orgid, projectid, credentialid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str credentialid: Credential Identifier (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid', 'credentialid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `delete_ios`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `delete_ios`")
        # verify the required parameter 'credentialid' is set
        if ('credentialid' not in params) or (params['credentialid'] is None):
            raise ValueError("Missing the required parameter `credentialid` when calling `delete_ios`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']
        if 'credentialid' in params:
            path_params['credentialid'] = params['credentialid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/credentials/signing/ios/{credentialid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_android(self, orgid, projectid, **kwargs):
        """
        Get All Android Credentials
        Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_android(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :return: list[InlineResponse20013]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_android_with_http_info(orgid, projectid, **kwargs)
        else:
            (data) = self.get_all_android_with_http_info(orgid, projectid, **kwargs)
            return data

    def get_all_android_with_http_info(self, orgid, projectid, **kwargs):
        """
        Get All Android Credentials
        Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_android_with_http_info(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :return: list[InlineResponse20013]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_android" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `get_all_android`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_all_android`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/credentials/signing/android', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse20013]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_ios(self, orgid, projectid, **kwargs):
        """
        Get All iOS Credentials
        Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_ios(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :return: list[InlineResponse20014]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_ios_with_http_info(orgid, projectid, **kwargs)
        else:
            (data) = self.get_all_ios_with_http_info(orgid, projectid, **kwargs)
            return data

    def get_all_ios_with_http_info(self, orgid, projectid, **kwargs):
        """
        Get All iOS Credentials
        Get all credentials available for the project. A user in the projects org will see all credentials uploaded for any project within the org, whereas a user with project-level permissions will only see credentials assigned to the specific project. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_ios_with_http_info(orgid, projectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :return: list[InlineResponse20014]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `get_all_ios`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_all_ios`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/credentials/signing/ios', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse20014]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_one_android(self, orgid, projectid, credentialid, **kwargs):
        """
        Get Android Credential Details
        Get specific android credential details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_one_android(orgid, projectid, credentialid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str credentialid: Credential Identifier (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_one_android_with_http_info(orgid, projectid, credentialid, **kwargs)
        else:
            (data) = self.get_one_android_with_http_info(orgid, projectid, credentialid, **kwargs)
            return data

    def get_one_android_with_http_info(self, orgid, projectid, credentialid, **kwargs):
        """
        Get Android Credential Details
        Get specific android credential details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_one_android_with_http_info(orgid, projectid, credentialid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str credentialid: Credential Identifier (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid', 'credentialid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_one_android" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `get_one_android`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_one_android`")
        # verify the required parameter 'credentialid' is set
        if ('credentialid' not in params) or (params['credentialid'] is None):
            raise ValueError("Missing the required parameter `credentialid` when calling `get_one_android`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']
        if 'credentialid' in params:
            path_params['credentialid'] = params['credentialid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/credentials/signing/android/{credentialid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_one_ios(self, orgid, projectid, credentialid, **kwargs):
        """
        Get iOS Credential Details
        Get specific iOS credential details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_one_ios(orgid, projectid, credentialid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str credentialid: Credential Identifier (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_one_ios_with_http_info(orgid, projectid, credentialid, **kwargs)
        else:
            (data) = self.get_one_ios_with_http_info(orgid, projectid, credentialid, **kwargs)
            return data

    def get_one_ios_with_http_info(self, orgid, projectid, credentialid, **kwargs):
        """
        Get iOS Credential Details
        Get specific iOS credential details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_one_ios_with_http_info(orgid, projectid, credentialid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str credentialid: Credential Identifier (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid', 'credentialid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_one_ios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `get_one_ios`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `get_one_ios`")
        # verify the required parameter 'credentialid' is set
        if ('credentialid' not in params) or (params['credentialid'] is None):
            raise ValueError("Missing the required parameter `credentialid` when calling `get_one_ios`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']
        if 'credentialid' in params:
            path_params['credentialid'] = params['credentialid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/credentials/signing/ios/{credentialid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_android(self, orgid, projectid, credentialid, **kwargs):
        """
        Update Android Credentials
        Update an android keystore for the project. NOTE: you must be a manager in the project's organization to add new credentials. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_android(orgid, projectid, credentialid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str credentialid: Credential Identifier (required)
        :param str label: Label for the uploaded credential
        :param file file: Keystore file
        :param str alias: Keystore alias
        :param str keypass: Keystore keypass
        :param str storepass: Keystore storepass
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_android_with_http_info(orgid, projectid, credentialid, **kwargs)
        else:
            (data) = self.update_android_with_http_info(orgid, projectid, credentialid, **kwargs)
            return data

    def update_android_with_http_info(self, orgid, projectid, credentialid, **kwargs):
        """
        Update Android Credentials
        Update an android keystore for the project. NOTE: you must be a manager in the project's organization to add new credentials. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_android_with_http_info(orgid, projectid, credentialid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str credentialid: Credential Identifier (required)
        :param str label: Label for the uploaded credential
        :param file file: Keystore file
        :param str alias: Keystore alias
        :param str keypass: Keystore keypass
        :param str storepass: Keystore storepass
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid', 'credentialid', 'label', 'file', 'alias', 'keypass', 'storepass']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_android" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `update_android`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `update_android`")
        # verify the required parameter 'credentialid' is set
        if ('credentialid' not in params) or (params['credentialid'] is None):
            raise ValueError("Missing the required parameter `credentialid` when calling `update_android`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']
        if 'credentialid' in params:
            path_params['credentialid'] = params['credentialid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'label' in params:
            form_params.append(('label', params['label']))
        if 'file' in params:
            local_var_files['file'] = params['file']
        if 'alias' in params:
            form_params.append(('alias', params['alias']))
        if 'keypass' in params:
            form_params.append(('keypass', params['keypass']))
        if 'storepass' in params:
            form_params.append(('storepass', params['storepass']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/credentials/signing/android/{credentialid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_ios(self, orgid, projectid, credentialid, **kwargs):
        """
        Update iOS Credentials
        Update an iOS certificate / provisioning profile for the project. NOTE: you must be a manager in the project's organization to update credentials. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_ios(orgid, projectid, credentialid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str credentialid: Credential Identifier (required)
        :param str label: Label for the updated credentials
        :param file file_certificate: Certificate file (.p12)
        :param file file_provisioning_profile: Provisioning Profile (.mobileprovision)
        :param str certificate_pass: Certificate (.p12) password
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_ios_with_http_info(orgid, projectid, credentialid, **kwargs)
        else:
            (data) = self.update_ios_with_http_info(orgid, projectid, credentialid, **kwargs)
            return data

    def update_ios_with_http_info(self, orgid, projectid, credentialid, **kwargs):
        """
        Update iOS Credentials
        Update an iOS certificate / provisioning profile for the project. NOTE: you must be a manager in the project's organization to update credentials. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_ios_with_http_info(orgid, projectid, credentialid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str orgid: Organization identifier (required)
        :param str projectid: Project identifier (required)
        :param str credentialid: Credential Identifier (required)
        :param str label: Label for the updated credentials
        :param file file_certificate: Certificate file (.p12)
        :param file file_provisioning_profile: Provisioning Profile (.mobileprovision)
        :param str certificate_pass: Certificate (.p12) password
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgid', 'projectid', 'credentialid', 'label', 'file_certificate', 'file_provisioning_profile', 'certificate_pass']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgid' is set
        if ('orgid' not in params) or (params['orgid'] is None):
            raise ValueError("Missing the required parameter `orgid` when calling `update_ios`")
        # verify the required parameter 'projectid' is set
        if ('projectid' not in params) or (params['projectid'] is None):
            raise ValueError("Missing the required parameter `projectid` when calling `update_ios`")
        # verify the required parameter 'credentialid' is set
        if ('credentialid' not in params) or (params['credentialid'] is None):
            raise ValueError("Missing the required parameter `credentialid` when calling `update_ios`")


        collection_formats = {}

        path_params = {}
        if 'orgid' in params:
            path_params['orgid'] = params['orgid']
        if 'projectid' in params:
            path_params['projectid'] = params['projectid']
        if 'credentialid' in params:
            path_params['credentialid'] = params['credentialid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'label' in params:
            form_params.append(('label', params['label']))
        if 'file_certificate' in params:
            local_var_files['fileCertificate'] = params['file_certificate']
        if 'file_provisioning_profile' in params:
            local_var_files['fileProvisioningProfile'] = params['file_provisioning_profile']
        if 'certificate_pass' in params:
            form_params.append(('certificatePass', params['certificate_pass']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain', 'text/html', 'text/csv'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['apikey', 'permissions']

        return self.api_client.call_api('/orgs/{orgid}/projects/{projectid}/credentials/signing/ios/{credentialid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
